
                    FILES DESCRIPTION:

1. tracker_api.py - holds the implementation of the our tracker's Rest
                    API. contains our main function.

2. risk_analyzer.py - holds the implementation of the risk analysis computation
                      required for the 'infectionRisk' functionality in task3.

3. notificator.py - holds the implementation of polling the server for new
                    confirmed cases, checking against our subscriber and
                    notifying them.

  * Main is at tracker_api.py


OTHER FILES:
    1. CountriesData dir - contains covid19 stats for each
    country (in a separate file). used as cache for task3.

    2. Subscribers dir - contains subscribers data for each country in a separate
    file. (task 4)

    3. Notifications dir - will contains a single notification.json file
    (for task 5)

    4. notificator_test.py -  a small and simple test for the notificator.


1.              A note regarding task 3:

    some countries, like the netherlands (that appeared in the assignment
    example), have multiple covid19 records per day.
    for instance,
    https://api.covid19api.com/country/Netherlands?from=2021-01-07T00%3A00%3A00&to
    =2021-01-08T00%3A00%3A00,
    will include a records for the netherlands mainland but also several records
    for each dutch territories.
    when considering active & confirmed cases of country per day, i chose to
    consider only the mainland data (where province attribute is "").


2.               regrading tasks 4+5:

A.  I chose to implement and handle the subscribers data in the following
    manner: creating a .json file for each country, which will hold subscribers
    info by date and by mail (which is unique):
    e.g in israel's subscribers file, we can have:

    {date_x: {email_x: [{route_a, route2_b, route_c], email_y: [{route_z}]}

    when looking for potential infected subscribers by a confirmed case
    in day x in italy, we go for italy subscribers file, then
    "day x" key and so on.

    * Assuming a single subscriber can attempt multiple routes per day and
    transmit them separately, I chose to implement the value of a subscriber as an
    array of routes per each subscriber(and therefore the [] in the above example).


B.  Using files in disk to store subscribers' data is safer than holding all in
    the notificator process memory, which indeed assures faster access but can
    be exposed to risk if process or server are down.
    Regrading subscribers' files race condition potential issues, I figured
    that since I use a default single-threaded flask, which will process one
    request at a time, I won't create any writers race conditions over
    files, and the poll_and_notify process in fact a reader. And so race
    hazarads should not occur.

C.  In a situation where a subscriber has been infected several times, I
    assumed he'd like to be notified for each interaction point.